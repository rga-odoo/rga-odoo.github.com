<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ravi Gadhia]]></title>
  <link href="http://rga-odoo.github.com/atom.xml" rel="self"/>
  <link href="http://rga-odoo.github.com/"/>
  <updated>2014-10-19T12:18:41+05:30</updated>
  <id>http://rga-odoo.github.com/</id>
  <author>
    <name><![CDATA[Ravi Gadhia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Various Technique of Debugging for Python]]></title>
    <link href="http://rga-odoo.github.com/blog/2013/01/17/title/"/>
    <updated>2013-01-17T18:47:00+05:30</updated>
    <id>http://rga-odoo.github.com/blog/2013/01/17/title</id>
    <content type="html"><![CDATA[<p>Debugging is most important aspect of the programming. When we found a bug we starting digging code with our handy tool and library. Sometime it’s look like solving math equations using <a href="http://en.wikipedia.org/wiki/Bisection_method">bisection method</a>. From spot fix to root fix. It become quite tedious and complex when you dealing with large framework where hundreds of class and thousands of methods are define. Lots of instance create and destroy runtime. Let’s start with python.</p>

<p>One of my favorite lib for debuggin of python code is <a href="http://docs.python.org/2/library/inspect.html">inspect</a>.<br />
Inspect.stack() give you full stack on function call. it very useful to undestand the flow of excecution.</p>

<figure class='code'><figcaption><span>inspect stack.  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">inspect</span>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">inspect</span><span class="o">.</span><span class="n">stack</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Call stack...&#39;</span><span class="p">,</span><span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above code will print full stack frame.</p>

<pre><code>Call stack... (&lt;frame object at 0xb49ab74&gt;, '/home/ravi/openerp-tools/server/trunk/openerp/osv/orm.py', 2316, 'search', ['        for x in inspect.stack():\n'], 0)
Call stack... (&lt;frame object at 0xbbb54d4&gt;, '/home/ravi/openerp-tools/server/trunk/openerp/addons/base/res/res_users.py', 322, 'name_search', ["            ids = self.search(cr, user, [('login','=',name)]+ args, limit=limit, context=context)\n"], 0)
Call stack... (&lt;frame object at 0xb876bac&gt;, '/home/ravi/openerp-tools/server/trunk/openerp/osv/osv.py', 166, 'execute_cr', ['        return getattr(object, method)(cr, uid, *args, **kw)\n'], 0)
Call stack... (&lt;frame object at 0xb884964&gt;, '/home/ravi/openerp-tools/server/trunk/openerp/osv/osv.py', 179, 'execute', ['                res = self.execute_cr(cr, uid, obj, method, *args, **kw)\n'], 0)
Call stack... (&lt;frame object at 0xb99fe24&gt;, '/home/ravi/openerp-tools/server/trunk/openerp/osv/osv.py', 123, 'wrapper', ['                return f(self, dbname, *args, **kwargs)\n'], 0)
Call stack... (&lt;frame object at 0xb99fc9c&gt;, '/home/ravi/openerp-tools/server/trunk/openerp/osv/osv.py', 169, 'execute_kw', ['        return self.execute(db, uid, obj, method, *args, **kw or {})\n'], 0)
Call stack... (&lt;frame object at 0xb99fb1c&gt;, '/home/ravi/openerp-tools/server/trunk/openerp/service/web_services.py', 614, 'dispatch', ['        res = fn(db, uid, *params)\n'], 0)
</code></pre>

<h3>Inspect with class property:</h3>

<p>Generally object has a some property(attribute) like readonly, required, title, which are change so frequently during execution and we want to know from where(exactly which file with line no) change the particular property. look at following code..</p>

<figure class='code'><figcaption><span>inspect stack.  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Charfield</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_readonly</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">fget</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Getting: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">_readonly</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_readonly</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">fset</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Setting: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">value</span>
</span><span class='line'>        <span class="kn">import</span> <span class="nn">inspect</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">inspect</span><span class="o">.</span><span class="n">stack</span><span class="p">():</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;trace:&#39;</span><span class="p">,</span><span class="n">x</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_readonly</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">fdel</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Deleting: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span><span class="bp">self</span><span class="o">.</span><span class="n">_readonly</span>
</span><span class='line'>        <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">_readonly</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">readonly</span> <span class="o">=</span> <span class="nb">property</span><span class="p">(</span><span class="n">fget</span><span class="p">,</span> <span class="n">fset</span><span class="p">,</span> <span class="n">fdel</span><span class="p">,</span> <span class="s">&quot;I&#39;m the property.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">instance</span> <span class="o">=</span> <span class="n">Charfield</span><span class="p">()</span>
</span><span class='line'><span class="n">instance</span><span class="o">.</span><span class="n">readonly</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;XX&#39;</span><span class="p">,</span><span class="n">instance</span><span class="o">.</span><span class="n">readonly</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output: Here in trace you can see line no:23 change the readonly property of instance.</p>

<pre><code>Setting: True
trace: (&lt;frame object at 0x8a41aac&gt;, 'property.py', 12, 'fset', ['        for x in inspect.stack():\n'], 0)
trace: (&lt;frame object at 0x8a714d4&gt;, 'property.py', 23, '&lt;module&gt;', ['instance.readonly = True\n'], 0)
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;XX Getting: True
True
</code></pre>

<h3>Inspect with dictionary modification:</h3>

<p>many time object has a dictionary as property (mostly when many common attributes of object initialize simultaneously).</p>

<figure class='code'><figcaption><span>inspect stack.  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">DictWatch</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>        <span class="n">val</span> <span class="o">=</span> <span class="nb">dict</span><span class="o">.</span><span class="n">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;GET&#39;</span><span class="p">,</span> <span class="n">key</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">val</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;SET&#39;</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span>
</span><span class='line'>        <span class="kn">import</span> <span class="nn">inspect</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">inspect</span><span class="o">.</span><span class="n">stack</span><span class="p">():</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;trace :) :&#39;</span><span class="p">,</span><span class="n">x</span>
</span><span class='line'>        <span class="nb">dict</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">val</span> <span class="o">=</span> <span class="nb">dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">val</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">dict</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>            <span class="bp">self</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Model</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="nb">id</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">attrs</span> <span class="o">=</span> <span class="n">DictWatch</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">state</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">make_readonly</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">attrs</span><span class="p">[</span><span class="s">&#39;readonly&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">make_invisible</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">attrs</span><span class="p">[</span><span class="s">&#39;invisible&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">detail</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;&gt;&gt;&gt;&gt;&gt;&#39;</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">attrs</span><span class="p">[</span><span class="s">&#39;readonly&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;&lt;&lt;&lt;&lt;&lt;&#39;</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">attrs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;color&#39;</span><span class="p">,</span><span class="s">&#39;no attribute found&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">Model</span><span class="p">(</span><span class="s">&#39;timbuk.too&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">make_readonly</span><span class="p">()</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">make_invisible</span><span class="p">()</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">detail</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;print instance with attributes:&#39;</span><span class="p">,</span><span class="n">a</span>  <span class="c"># &lt;__main__.Model object at 0xb770010c&gt; without  __repr__</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here class <code>DictWatch</code> override method of dict. so whenever any changes happen in <code>self.attrs</code> flow pass through overridden method of <code>DictWatch</code>. you can override any method of dict inside <code>DictWatch</code> class.</p>

<pre><code>SET readonly True
trace :) : (&lt;frame object at 0x8d496f4&gt;, 'setttrs.py', 13, '__setitem__', ['        for x in inspect.stack():\n'], 0)
trace :) : (&lt;frame object at 0x8d3f83c&gt;, 'setattrs.py', 33, 'make_readonly', ["        self.attrs['readonly'] = True\n"], 0)
trace :) : (&lt;frame object at 0x8d064d4&gt;, 'setattrs.py', 44, '&lt;module&gt;', ['a.make_readonly()\n'], 0)
SET invisible True
trace :) : (&lt;frame object at 0x8d496f4&gt;, 'setattrs.py', 13, '__setitem__', ['        for x in inspect.stack():\n'], 0)
trace :) : (&lt;frame object at 0x8d70094&gt;, 'setattrs.py', 36, 'make_invisible', ["        self.attrs['invisible'] = True\n"], 0)
trace :) : (&lt;frame object at 0x8d064d4&gt;, 'setattrs.py', 45, '&lt;module&gt;', ['a.make_invisible()\n'], 0)
&gt;&gt;&gt;&gt;&gt; GET readonly
True
&lt;&lt;&lt;&lt;&lt; no attribute found
print instance with attributes: &lt;__main__.Model object at 0xb771e0cc&gt; 
</code></pre>

<h3> __repr__: </h3>


<p>repr() method is used when an “informal” string representation of instances of that class is required. it&#8217;s very useful when lot&#8217;s of instance of class generated at runtime so using repr() you can print object with its attribute.
Add following repr method in <code>Model</code> class</p>

<figure class='code'><figcaption><span>__repr__.  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;&lt;</span><span class="si">%s</span><span class="s">@</span><span class="si">%s</span><span class="s">&gt;&#39;</span><span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will print instance with id and name attribute:</p>

<pre><code>print instance with attribue: &lt;1@timbuk.too&gt;
</code></pre>

<h3>pdb:</h3>

<p><a href="http://docs.python.org/2/library/pdb.html">pdb</a> is another useful library for debugging. following code put break point during execution so you can inspect here any variable or stack frame. it will freeze the execution with live instance. <a href="http://docs.python.org/2/library/pdb.html">pdb</a> has many debugger commands to execute statement step by step refer python doc for more info.</p>

<figure class='code'><figcaption><span>pdb.  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="kn">import</span> <span class="nn">pdb</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pdb</span><span class="o">.</span><span class="n">set_trace</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>with <a href="https://www.openerp.com">OpenERP</a> pdb is really help when bug lie down under <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> layer. start openerp server with sql debug mode using <code>--log-level='debug_sql'</code> and put <code>pdb.set_trace()</code> in function which likely to be execute.</p>

<p>Here in following code block you can observe when <code>search</code> method call which <code>sql query</code> generated by ORM. and you can verify value of each variable for instance.</p>

<pre><code>2013-01-16 18:49:13,120 5113 DEBUG jan16 openerp.sql_db: ConnectionPool(used=0/count=1/max=64) Borrow connection to 'user=ravi dbname=jan16'
2013-01-16 18:49:13,120 5113 DEBUG jan16 openerp.sql_db: ConnectionPool(used=1/count=1/max=64) Existing connection found at index 0
&gt; /home/ravi/openerp-tools/addons/trunk/project/project.py(85)search()
-&gt; if user == 1:
(Pdb) self
&lt;openerp.osv.orm.project.project object at 0xb7ba84c&gt;
(Pdb) cr
&lt;openerp.sql_db.Cursor object at 0xb988bcc&gt;
(Pdb) super(project, self).search(cr, user, args, offset=offset, limit=limit, order=order, context=context, count=count)
2013-01-16 18:46:40,557 5048 DEBUG jan16 openerp.sql_db: query: SELECT "project_project".id FROM "project_project" WHERE (("project_project"."active" = E'True')  AND  ("project_project"."state" = E'open')) ORDER BY "project_project"."sequence" ,"project_project"."id"   limit 40
[1, 2, 3, 4, 5]
</code></pre>

<h3>Other:</h3>

<ul>
<li><a href="http://docs.python.org/2/library/functions.html#dir"><strong>dir</strong></a> return list of all available attributes of object.</li>
<li>Many python dev intentionally crash the execution(using undefined variable). I think it is quickest way to observe stack flow :)<br/></li>
<li>Avoid using try, except statement when you are debugging code. it may missguid, simply system generated log is great.</li>
</ul>

]]></content>
  </entry>
  
</feed>
